def calcular_gc_contenido(secuencia):
    """Calcula el porcentaje de G y C en la secuencia."""
    # Cuenta cuántas bases en la secuencia son G o C usando una comprensión de generador
    gc = sum(1 for base in secuencia if base in ['G', 'C'])

     # Retorna el porcentaje de G y C sobre el total, evitando división por cero
    return (gc / len(secuencia)) * 100 if len(secuencia) > 0 else 0

def obtener_gc_maximo(fasta_texto):
    secuencias = {}     # Diccionario para guardar ID de cada secuencia y su contenido

    id_actual = None    # Variable para mantener el ID de la secuencia que se está leyendo

    datos = fasta_texto.strip().splitlines()  # Elimina espacios y divide el texto línea por línea

    for linea in datos:
        if linea.startswith('>'): # Si la línea comienza con '>', es un nuevo identificador (ID) de secuencia FASTA

            id_actual = linea[1:].strip()  # Elimina el símbolo '>' y espacios extra

            secuencias[id_actual] = ""       # Inicializa la secuencia con ese ID

        else:       # Si no comienza con '>', es parte de la secuencia de ADN

            secuencias[id_actual] += linea.strip()  # Agrega la línea a la secuencia actual

    gc_porcentaje = {id_seq: calcular_gc_contenido(seq) for id_seq, seq in secuencias.items()}  # Calcula el porcentaje de GC para cada secuencia

    id_max_gc = max(gc_porcentaje, key=gc_porcentaje.get)   # Encuentra el ID de la secuencia con el mayor porcentaje de GC

    return id_max_gc, round(gc_porcentaje[id_max_gc], 6)    # Retorna el ID de la secuencia con más GC y su porcentaje redondeado a 6 decimales

# entrada para resolver caso
fasta_data = """>Rosalind_9334
TGAAGTTGCTAGTAGAGACGATGAATGCATACACCGTACCCCCTCCCTGGGGAATCTACA
CGTGGGGTGTGTTTCATGCGTTAAGGGGATATCGAAGTTGGACGCGCCCGAGATGAACTA
AGGTGTATATTGATTTATAACTTTTATCCTGCTTGACAATCGTCACTGGATAGGAAGGAA
TACTGCGCCGAGTCCTATATAAGCCACATCTGGATTAGGCTCGTTTGAATTTAAACAGAT
AGCCAGCAAAAGGAGAATAAGTTGACTTACGGATCATGACTCCGCGCTCAGCTTCTAAGG
CGAAAATTCGTTAAACCAAGTCGTAAGCAAACCTCGGAAGCATCTTGTCCCCCGATTCGA
TACATAGGACTAGTAGTCAACACACTTAGAAAGGGTGCAATGGTCGCCACTTTTCCGTCG
CCACAATATGCTAACCCAGGTATAAAGGCAACACCAAGACGGTAGTCCCACACACTTCTG
ATTGGTAGCTTTTTTCTGGGTGACGGAGATGCGCGCAGATTGGTGAATTGCTGAAGCGCT
TTCGATTGCATATCGGGCTGGGGGTCTTGGGCCACATTTTCGTGTTTCCTAACCGTTTCT
CGGGGGTAACGGAAATCCATCCAACATTAATGCAGCGTTCGTACGACATTCGGAACACAA
ACAAGGCATCGAAAAGAGTGGTGGTCGCGAGGCCTACACTTTTCGAACTTGTAGACGAAC
CCCACGTGACAGACCGACTGTAGACTGAGCCAAGTGTTACCGACAAGTAGTCACCTGACG
CACAACAAACGAACGTCGCTGAAGAGATTATCTAGCCGGGGGAGAAGCTACTATTTTGAG
AGCGTCTTCCCACGACCAATGAGTTAAGTGTGCCCTATTAATATATTTCTACTCTATTGT
GGGAGTGTAGCCAACGCTGCGGGTGCCCCTTAGGCGGT
>Rosalind_1160
GGCACGTTATGTGCTGAATACAATGACTTCGCCTATAAGACCCGCTTCCCTTCTCAGGGA
TTGAGATGTTCGAATGGAGTATAGAGAACGGGTTTTTCTCCACTTTGGTGAGTCACTGGC
ACTACTCACACGACTATATCATCGTCCTATTATCCGTTTGATGCACCCTGCAACAAAATA
AGCCTGATACTGCGCGTCCTCACCAGCCGGATAGGATCTGTACCGAGCCCTCCTCTCCAA
AGAGCGTCAGAAGATGCCTACGTTAGCGAAGGGAGCCCATGTAACTCCTGCATTATGCAG
GGTTTCCGTCCTCTAAAATCTGGTCTGCCAATTTACATATTTCTTTGATGTATGCTAAGC
GACGGCCATCCGACTAGGCACCATAATACCTTCGGCGTCGGGTCCTCCGTGTCTTCGGCC
TTTACTATAATTCGCCAATGATTTGTTCGAATCGGGTGATTTTCAACTGGATTCGCAAGG
GAGTTCTTCCTCGATTAAACTACCCCGGTAGTAATGTTTAGTTAAAAGTTTAGAAACACC
CCCCAGATAGGATTTCGTGCGTCCGCTCACGTCATCGAAAATAGTTCAAACACTGTATCC
CCTAACCCTGCGAGATGATCTGGTTCGATGCTACTAAATAAAAACGGCATTAGATTCAGG
GCGGCATGGTCGGATGTTTAATCCTTCTCAAATCTCGGGCTTTGTACATGTGCACTTAGC
GTCCACGCTAGCTTAGGGTAATCCACCTAAGTTACCCCAGGGTCGTATAATATGCTCGTA
CAGTCGGTCCTTTCGCTAATGCCATACCCTATGTTAAGCCCCGAGGGCGCATCGTACTGG
TTGCCGTTTTGGAGATACAGCTTACTCATCGAGTTCGGAGCCTCCCAACGACGGAGCCCG
GAGTGTAGGTTTGCGCAATTCGTTTTTGGCCACACTAATAAACCGAACCAGACTGTTCTT
AGGACCACGGGCAGTCTCACGACGTATGTCTGGGTCGGG
>Rosalind_1203
GCCGTGGATCACCTTGATGGGGGGGAGTCGTGCTTTACGATAGGATCGTGCACTTAGCTC
CGCAAAGGTTACGTAAAAACCGAGATATCGAATATGACGAAGTGTGGCACAGTCAGTTCA
TTGTCCACACGGCAACGCGACTTCTAAGACAAAAAACATCGCTAAGGGCAATGATACACT
TACGAACTTGGTTTACCGTCGGACCTTCCAAGCCTGAGAGCATTCTTAGATGTCTGATGC
GTGCGAACCAGATTGCGCTCACGGCACGGACATCGATACTTGGTCTAGCACCGATACCGC
GTAGAGGACATCTCATACCTGCTGGTTTCTCCAACCGCCCCATGACGACACTACCACACT
TATTCATAAAAGGTACGGTCTCGTGCCGACTAAAATGATAAGTAACCAGAAGAACTCGGG
GACTTGCGTATAATAATCTGATACATGGCTCTCTATGCCACTGGATTGTCGTACATTTTA
GCGCCGGTCGCAGGCTATGATCTCTGCAAACGGACTGTTTTATCATTAGACCTACCAATA
GTTTCTGGTCCGTCTTCATTAGATCGGTTCACAGAAGGGTTTATTCATGCAACACATAAC
GCCATTGTAAGCAATTGGACGAAAGGCATGGTGCAGAAAGCATCTGTTTTCCTAACCGGG
GAATAGAGAGCATAATACCTCGAGTGACCGCTAGTTGAAGGCGGCTTCCCTGTGCTAACG
GCCCGTACAACTCGGGTTTGCTGTTAGAATCCTCGGCTACCTCCACTCCACTACAGAGCA
ATAGGTGTATGTGCTTCCGACATCCCGTAAAACGTTGCCGGAGATTCATTCCTTGTTTGA
GATCACGCGATTGCAAGGCTGTTTTCCCCTCCGATCATCCTTGCTTT
>Rosalind_3880
TCTCTCATTTTTTAAACCCATCTTTGAGACGACTGGTAAGTGAGAACACGGATTCGTACT
AGTAGCAGCAATAGGCCACAACGCGTTCTTCAGAACGTTTCCAGAAGCGGCCGTTAGTTG
ATTGGGGAGAGGGGTCTAATGACAGTCTTCTCACTTTGTAACTCTTTGGCCTGTTTCTCA
GTGGAAAGTTGAACGGTGCGGTTACGGAACTCGCGACACGGTGGTTATACCCTCCGAAGG
GCTCAAATGGTTACGTGAGTAGACCAGTACGTCCTCAGTATTAGAGTAATCATACATCGC
AAAGTACTTACATGTCTAAGAAGTGAGCAAAAGAGACGTGTTAACACATGAACGAGTATA
AACAAGATGTTTCCGCGCCAGTTTCCGTATTTGCAATTATCTCTGTACCACGCTAATGCT
AACCTCCCCTGAGTTATGGACTAGTATCAATCTCATAGACGTTCTGCGCGCCATTGTCCA
CACTATCGGACATGGAGTAGGTGGCACTGCTAATCGTACTTCACGCCTTATATGTGCTAT
TGATAGGCCCCCCATGACAATCCCGAGGACCACCTCTTATGCGCGTGGGCCGTTTTACGT
CCGGCCAAGTACTGAAAGGAAAGCAAAGACCTTTGACAACATTGGTGCCAGTGATCTTGA
GTTTCTCGCGACCTTTATAGTAACCACGAGGCCGGTCGCCTAAGGAAGCCGATGGACCAT
CTTGCTTTTTGGTCCGCTTGGGGCAGCTATGCGAAGCAAGCGCCAGTCGTCCTAGCTCAG
GTGCCATCACCACATGGTCGCGCAACCCTCACATAAAATACTCGAGCCCTTAGGCCCGGG
GCACCGGTGCCGGCTCCGATCCTTGGAAGGATTGCGTGTCGGACGCGCTATGATCCCACG
AGT
>Rosalind_2473
CCTTGCGAGCATAACCGTCCATACCGATCGGTCACCGATTCCCAGGAGCTTTTGATTAAC
TATTCACTCTATGTCCTCTTATCAGCATTGATTACCTCACACATTTTAGCGGACGTAGAC
GGCTGTAGTGGCGTTACTCCGATGGACAGGACATCTTTTTCTACTAGCTCAACGAAGGAC
GCCGCACCATGTCAACAACAAGGACAGACGCTCCAACTTCGGTTAGGCTTCGGCGATGCA
GATTGGAGGGGCTCATCTCTGTACCGGGAAAATTGCCTTGCTGCTACCCGGTCTCGCCGT
CGACGCGAACCCACGACACATCTACCGCCTGCGGTCCGATGAAACGCGACAATAAGGCCC
ACCTTCACCAAACAATTAGTCGTAAGTATGGGCGCTTCAAAACCGTCGGTCGAAAGAAAC
CTATATGGTCAAGAAAGAACAGCGCCCTGCTGCGCCCGTGCGGCAGCCCTGAGCCTAATC
CTTGGGGGACCTGAACTTCACATAAAAGTATGCCATGACGACCACGCTTAAGCCATCCAC
CTGAGTGCTGCCAAAATCCTAAGGTTTGCACAGAGATGCCTTTGTGGCATATTTATCCAC
ATTCGGCTTCAAATTCGCGCCTCGGCAGGTCTGCCGCGTGACCGTTTAAGGGTCGTCGTT
AGAACAACTAGAAGGGCATCTCGACAAAACCTGGGGTGTACAACTACGCGCCTGACGAGC
GCGATTGAGGGGACACAGTGCTCTTGTCAGACCGAATTCCGCCTGAGATTCCTATCGCTC
TTAAGCTATGTTGCTAACTATGGACGAGGATGTATGTCGCGTAAAAGAAGGGTCCC
>Rosalind_8265
CCGGCGAGGCAGCTTCGGCTGTCTAACACACAGTAGACGTGTCGAAGAGACGGGATACCC
TTGCGGGAACTAACATTTTCAAGCTCGGCCGGACGCGGCGTGCCCGTCATACAGCGGAAC
TCACCATAATACGACTTTAATTGAAAGCCACGAGTTGCCTTTTGGATTATTCCAATTTTT
GCAATGAGACGGTTCATCATCCTCATGCATTACATGTGATCACGTCACCGTAGAGTGAGT
AAAGGCCACCTATAGAAGTGCGAGCACTAGGGCCTGAACTAATGGGGCGGCGCCCTAAGA
GCGAAATATAATCCAGCGCGCCCACTGCAGTGAAGCATTGCAGGCTTCAAATACGCGTAA
AGATGGACACCGCCATAATATAGAATACATTAAATCCCTATATTCGGTCGCTGAGCGAAC
TGAATTGGGTTTCCCAACCTAGCACGCTTTTGGGTATGACAGCCCGTTGACGGGAGGCAC
CTTCTTCGGTCGGAGGAACACTAGTATTACGTGGACGCATTACAATTTCAGGTGCACAAT
GCGGCACTATTATCCTTGCAGTATAATAGATAAAGTCACTTCGGCCAATACGCTAATTTC
GCTTGAGAGTCACTATGGGCCTGTAAATGACGCTTTAAGTTCATCGGGCTTTCCTTGCTC
TAGTGCGGCAATGACAAGCTACACGGTGAACTGCCGGATCGATCTCCGCTTCCGCCGGTT
ATAGGTGTTGCCAAGAAATGGCTAAATGACGGAGTGACAAGGGCCGGCTTGAGGTCTGGT
GTAGACGAACAGACATTCGAGACTGTGTTTATGCGCCGTTGTGTTCCATTGCCCGGAGCG
ATAT
"""

# Ejecusion para resolver caso
id_max, gc_max = obtener_gc_maximo(fasta_data)
print(id_max)
print(gc_max)

