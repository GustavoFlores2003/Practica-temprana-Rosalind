def obtener_complemento_inverso(cadena_adn):
    # Diccionario que define las bases complementarias
    complementos = {
        'A': 'T',
        'T': 'A',
        'C': 'G',
        'G': 'C'
    }

    # Construir el complemento inverso
    complemento_inverso = ""
    for base in cadena_adn:
        complemento_inverso = complementos[base] + complemento_inverso  # Agregar al inicio

    return complemento_inverso

# Uso para resolver caso
cadena_adn = "TCACGGTTGAAGCGCACCATATAGAAGTTTCAGTTGATTCTCCATATGGGTCGGGCTATCCCATTCTGCGCCGAGCAGTGACCAGTTTGCCCTTATATGCGCATTCTTTTGCTCATCTAAGACTGCCAACGGTAGCCGTATCACACCTCAGGAGACGATTGTACGAAGAAGTGCTTCCGCCCCTCTAAGCTACTTCCCCTCGTTTTACACATATTCCTGAATCTGGCCCACTTCGGAACAGGTGGTACCCTTTCGGAACGAGCGGATAACACGAAAACTGGCATACGACACAAACCGTTGGATCCTCATCAATTACAACGCCGATTGAATAACGGACGGTGGTGAAGCCTGTCATAGTGCCTTTCCTGGGGCAGAGCAACCATTCCATTCTTAATCGGGAAGTATCTGCTCTTTAAATGCAGACTAAAAAAATCTGTGCTTAGGCCAGTTGTTGGAAACCAGTACCTTCGAGTCCGTCGCTGTTGATGCAGTTCCACCACAGTAAGCGCAGCACCCTTCGCCGGTCTTTTCTGAAGCTCGGCCTTAGGGTGAGGGCTGCAGACCCGTGGCAGAGCGTTCTCGGGTTCCGTGCACCATCCAGAGTAATATTTACCCTGGCCAGGCGCCACCCATGCCTCGCTCCCCGCTGAGTCGGCATATATGTCAGAGCGGAGCTCACCATCGTGATGCTTTGGCGGCCAGCCGGCTCGGTTGTTTGATTATTCGGCGGATGCGTGGCGTGACTACCGTGATGCGCCAGCCTCGCAGTTCCGGCCAACATGAGGGTTCGCGTTCTGAACGAACAAGCGATAACTTGCCAAGTGGAGGCGTGGTGGCCCACGGTTTAGCGTTTCGCTCGCAGCTTGGTGACACCTCGCGATCGGCAGAGGGCGCCCCCGGCCGGCGCTGACGATCGGAAGCGGTTGCGAGGTCACATGCCATCCAGATAATAATTGTTTCCT"
resultado = obtener_complemento_inverso(cadena_adn)
print("Complemento inverso:", resultado)

